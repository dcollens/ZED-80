Getting Started
===============

To get zasm, go to:
    https://k1.spdns.de/Develop/Projects/zasm/Distributions/
    Scroll to the bottom and download the file
        zasm-4.2.4-macos10.12.zip
    or newer if available. Unzip and copy "zasm" binary into your path.

To assemble one of these programs run:
    zasm -yu -i prog.asm

To program the ROM run:
    minipro -p SST39SF010A -w rom_monitor.rom

On Dan's MacBook, you can connect to the serial port with:
    minicom usbserial

On Lawrence's MacBook, you can connect to the serial port with:
    minicom --baudrate 38400 --device /dev/cu.usbserial-AK068DDT


Shared Library Routines
=======================

The "libcode" folder holds common library source code that is reused between multiple assembly
language programs. We reuse these library routines as source code because the assembler we
use (zasm) does not support output as a relocatable object file with separate linker phase.

Instead, we include the assembly language source directly into each top-level program that
needs any given function.

To avoid including unused routines, we separate each function into its own file. zasm
provides some built-in functionality to support this use-case, documented here:
    https://k1.spdns.de/Develop/Projects/zasm/Documentation/z38.htm#D

In summary, each symbol should be placed in its own file. If the function is named "foo",
then it should reside in the file "libcode/foo.s". If the data symbol is named "bar", then it
should reside in the file "libdata/bar.s".

At the end of the CODE segment in the main assembly language source file, place this line:
    #include library "libcode"
to automatically resolve all undefined functions from their corresponding implementation files
in the "libcode" folder.

Some functions require some static data too. For example, the pseudorandom number
generator functions use static data to hold the random seed value. These data declarations
must be included into a DATA segment instead of the CODE segment, so they are kept in
separate files in the "libdata" folder.

At the end of the DATA segment in the main assembly language source file, place this line:
    #include library "libdata"
to automatically resolve all undefined data symbols from their corresponding implementation
files.

Note that this means that symbols in the shared library should be named with a consistent
mnemonic prefix (e.g. "sio", "pio", "ctc", "joy", "rand", "math", "lcd", "kbd", etc.) to
prevent collisions both in the assembly language symbol namespace and in the filesystem.


CP/M disk image
===============

Install cpmtools package:
    sudo port install cpmtools
    brew install cpmtools

Create the "zed-80" disk definition for cpmtools:
    Port: % sudo vim /opt/local/share/diskdefs
    Brew: % vim /usr/local/share/diskdefs
Add the following block, e.g. at the end of the file:
    diskdef zed-80
	seclen 128
	tracks 256
	sectrk 256
	blocksize 8192
	maxdir 256
	skew 0
	boottrk 1
	os 2.2
    end

Create a new CP/M disk image:
    make sdcard.img

